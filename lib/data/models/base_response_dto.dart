import 'package:json_annotation/json_annotation.dart';

// part 'base_response_dto.g.dart'; // Will be generated by build_runner

/// Base response DTO for API responses
@JsonSerializable(genericArgumentFactories: true)
class BaseResponseDto<T> {
  @JsonKey(name: 'StatusCode')
  final int statusCode;

  @JsonKey(name: 'Message')
  final String? message;

  @JsonKey(name: 'Success')
  final bool success;

  @JsonKey(name: 'Data')
  final T? data;

  const BaseResponseDto({
    required this.statusCode,
    this.message,
    required this.success,
    this.data,
  });

  factory BaseResponseDto.fromJson(
    Map<String, dynamic> json,
    T Function(Object? json) fromJsonT,
  ) {
    return BaseResponseDto<T>(
      statusCode: json['StatusCode'] as int? ?? json['statusCode'] as int? ?? 0,
      message: json['Message'] as String? ?? json['message'] as String?,
      success: json['Success'] as bool? ?? json['success'] as bool? ?? false,
      data: json['Data'] != null ? fromJsonT(json['Data']) : null,
    );
  }

  Map<String, dynamic> toJson(Object Function(T value) toJsonT) {
    return {
      'StatusCode': statusCode,
      'Message': message,
      'Success': success,
      'Data': data != null ? toJsonT(data as T) : null,
    };
  }

  /// Check if the response is successful
  bool get isSuccess => success && statusCode >= 200 && statusCode < 300;

  /// Check if the response has data
  bool get hasData => data != null;

  /// Get error message or default message
  String get errorMessage => message ?? 'Có lỗi xảy ra';

  /// Create a successful response
  static BaseResponseDto<T> createSuccess<T>({
    T? data,
    String? message,
    int statusCode = 200,
  }) {
    return BaseResponseDto<T>(
      statusCode: statusCode,
      message: message,
      success: true,
      data: data,
    );
  }

  /// Create an error response
  static BaseResponseDto<T> error<T>({
    required String message,
    int statusCode = 400,
    T? data,
  }) {
    return BaseResponseDto<T>(
      statusCode: statusCode,
      message: message,
      success: false,
      data: data,
    );
  }

  /// Create a response from HTTP status code
  static BaseResponseDto<T> fromStatusCode<T>({
    required int statusCode,
    String? message,
    T? data,
  }) {
    final isSuccess = statusCode >= 200 && statusCode < 300;
    return BaseResponseDto<T>(
      statusCode: statusCode,
      message: message ?? (isSuccess ? 'Thành công' : 'Có lỗi xảy ra'),
      success: isSuccess,
      data: data,
    );
  }

  @override
  String toString() {
    return 'BaseResponseDto{statusCode: $statusCode, message: $message, success: $success, data: $data}';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is BaseResponseDto<T> &&
        other.statusCode == statusCode &&
        other.message == message &&
        other.success == success &&
        other.data == data;
  }

  @override
  int get hashCode {
    return statusCode.hashCode ^
        message.hashCode ^
        success.hashCode ^
        data.hashCode;
  }
}

/// Extension for easier handling of BaseResponseDto
extension BaseResponseDtoExtension<T> on BaseResponseDto<T> {
  /// Execute a callback if the response is successful and has data
  R? onSuccess<R>(R Function(T data) callback) {
    if (isSuccess && hasData) {
      return callback(data as T);
    }
    return null;
  }

  /// Execute a callback if the response is an error
  R? onError<R>(R Function(String message) callback) {
    if (!isSuccess) {
      return callback(errorMessage);
    }
    return null;
  }

  /// Map the data to another type
  BaseResponseDto<R> map<R>(R Function(T data) mapper) {
    if (isSuccess && hasData) {
      return BaseResponseDto<R>(
        statusCode: statusCode,
        message: message,
        success: success,
        data: mapper(data as T),
      );
    }
    return BaseResponseDto<R>(
      statusCode: statusCode,
      message: message,
      success: success,
      data: null,
    );
  }

  /// Convert to a different type while preserving error state
  BaseResponseDto<R> cast<R>() {
    return BaseResponseDto<R>(
      statusCode: statusCode,
      message: message,
      success: success,
      data: null,
    );
  }
}
