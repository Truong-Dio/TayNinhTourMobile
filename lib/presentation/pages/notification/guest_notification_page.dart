import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../../providers/tour_guide_provider.dart';
import '../../widgets/common/loading_overlay.dart';
import '../../../domain/entities/active_tour.dart';

class GuestNotificationPage extends StatefulWidget {
  final String? tourId;
  
  const GuestNotificationPage({super.key, this.tourId});

  @override
  State<GuestNotificationPage> createState() => _GuestNotificationPageState();
}

class _GuestNotificationPageState extends State<GuestNotificationPage> {
  final _formKey = GlobalKey<FormState>();
  final _messageController = TextEditingController();

  ActiveTour? _selectedTour;
  bool _isUrgent = false;
  bool _isSending = false;

  final List<Map<String, String>> _messageTemplates = [
    {
      'title': 'üöå B·∫Øt ƒë·∫ßu tour',
      'message': 'Ch√†o m·ª´ng qu√Ω kh√°ch! Tour ƒë√£ ch√≠nh th·ª©c b·∫Øt ƒë·∫ßu. Ch√∫c qu√Ω kh√°ch c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi!',
    },
    {
      'title': 'üìç ƒê·∫øn ƒëi·ªÉm tham quan',
      'message': 'Ch√∫ng ta ƒë√£ ƒë·∫øn [T√™n ƒë·ªãa ƒëi·ªÉm]. Qu√Ω kh√°ch vui l√≤ng t·∫≠p trung v√† l√†m theo h∆∞·ªõng d·∫´n c·ªßa HDV.',
    },
    {
      'title': '‚òï Ngh·ªâ gi·∫£i lao',
      'message': 'Ch√∫ng ta s·∫Ω ngh·ªâ gi·∫£i lao 15 ph√∫t t·∫°i ƒë√¢y. Qu√Ω kh√°ch vui l√≤ng c√≥ m·∫∑t ƒë√∫ng gi·ªù ƒë·ªÉ ti·∫øp t·ª•c h√†nh tr√¨nh.',
    },
    {
      'title': 'üçΩÔ∏è Th·ªùi gian ƒÉn u·ªëng',
      'message': 'ƒê√£ ƒë·∫øn gi·ªù ƒÉn [b·ªØa s√°ng/tr∆∞a/t·ªëi]. Qu√Ω kh√°ch vui l√≤ng t·∫≠p trung t·∫°i nh√† h√†ng ƒë·ªÉ c√πng d√πng b·ªØa.',
    },
    {
      'title': '‚ö†Ô∏è Thay ƒë·ªïi l·ªãch tr√¨nh',
      'message': 'C√≥ thay ƒë·ªïi nh·ªè trong l·ªãch tr√¨nh. HDV s·∫Ω th√¥ng b√°o chi ti·∫øt. C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ th√¥ng c·∫£m.',
    },
    {
      'title': 'üö® Th√¥ng b√°o kh·∫©n c·∫•p',
      'message': 'Th√¥ng b√°o quan tr·ªçng: [N·ªôi dung kh·∫©n c·∫•p]. Qu√Ω kh√°ch vui l√≤ng l√†m theo h∆∞·ªõng d·∫´n c·ªßa HDV.',
    },
    {
      'title': 'üì∏ Ch·ª•p ·∫£nh l∆∞u ni·ªám',
      'message': 'ƒê√¢y l√† ƒë·ªãa ƒëi·ªÉm ch·ª•p ·∫£nh ƒë·∫πp! Qu√Ω kh√°ch c√≥ th·ªÉ ch·ª•p ·∫£nh l∆∞u ni·ªám t·∫°i ƒë√¢y trong 10 ph√∫t.',
    },
    {
      'title': 'üèÅ K·∫øt th√∫c tour',
      'message': 'Tour ƒë√£ k·∫øt th√∫c. C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ tham gia. Ch√∫c qu√Ω kh√°ch v·ªÅ nh√† an to√†n!',
    },
  ];

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadActiveTours();
    });
  }

  @override
  void dispose() {
    _messageController.dispose();
    super.dispose();
  }

  Future<void> _loadActiveTours() async {
    final tourGuideProvider = context.read<TourGuideProvider>();
    await tourGuideProvider.getMyActiveTours();

    // Auto-select tour based on provided tourId or first available
    if (widget.tourId != null && tourGuideProvider.activeTours.isNotEmpty) {
      try {
        final tour = tourGuideProvider.activeTours.firstWhere(
          (t) => t.id == widget.tourId,
        );
        setState(() {
          _selectedTour = tour;
        });
      } catch (e) {
        // If tour with specific ID not found, select first available
        setState(() {
          _selectedTour = tourGuideProvider.activeTours.first;
        });
      }
    } else if (tourGuideProvider.activeTours.isNotEmpty) {
      setState(() {
        _selectedTour = tourGuideProvider.activeTours.first;
      });
    }
  }

  Future<void> _refreshData() async {
    await _loadActiveTours();
  }



  Future<void> _sendNotification() async {
    if (!_formKey.currentState!.validate() || _selectedTour == null) {
      return;
    }

    setState(() {
      _isSending = true;
    });

    try {
      final tourGuideProvider = context.read<TourGuideProvider>();
      final success = await tourGuideProvider.notifyGuests(
        _selectedTour!.id,
        _messageController.text.trim(),
        isUrgent: _isUrgent,
      );

      if (success) {
        _showMessage('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
        _resetForm();
      } else {
        _showMessage(
          tourGuideProvider.errorMessage ?? 'Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o',
          isError: true,
        );
      }
    } catch (e) {
      _showMessage('C√≥ l·ªói x·∫£y ra: ${e.toString()}', isError: true);
    } finally {
      setState(() {
        _isSending = false;
      });
    }
  }

  void _resetForm() {
    _messageController.clear();
    setState(() {
      _isUrgent = false;
    });
  }

  void _showMessage(String message, {bool isError = false}) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError ? Colors.red : Colors.green,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  Widget _buildMessageTemplates() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'M·∫´u tin nh·∫Øn',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 8),
        Container(
          height: 120,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: _messageTemplates.length,
            itemBuilder: (context, index) {
              final template = _messageTemplates[index];
              return Container(
                width: 200,
                margin: const EdgeInsets.only(right: 12),
                child: Card(
                  elevation: 2,
                  child: InkWell(
                    onTap: () {
                      _messageController.text = template['message']!;
                    },
                    borderRadius: BorderRadius.circular(8),
                    child: Padding(
                      padding: const EdgeInsets.all(12),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            template['title']!,
                            style: Theme.of(context).textTheme.titleSmall?.copyWith(
                              fontWeight: FontWeight.w600,
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                          const SizedBox(height: 8),
                          Expanded(
                            child: Text(
                              template['message']!,
                              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                                color: Colors.grey[600],
                              ),
                              maxLines: 3,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            children: [
                              Icon(
                                Icons.touch_app,
                                size: 16,
                                color: Colors.grey[500],
                              ),
                              const SizedBox(width: 4),
                              Text(
                                'Ch·∫°m ƒë·ªÉ s·ª≠ d·ª•ng',
                                style: TextStyle(
                                  fontSize: 10,
                                  color: Colors.grey[500],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Th√¥ng b√°o kh√°ch h√†ng'),
        backgroundColor: Colors.orange,
        foregroundColor: Colors.white,
      ),
      body: Consumer<TourGuideProvider>(
        builder: (context, tourGuideProvider, child) {
          return LoadingOverlay(
            isLoading: tourGuideProvider.isLoading || _isSending,
            child: RefreshIndicator(
              onRefresh: _refreshData,
              child: SingleChildScrollView(
                physics: const AlwaysScrollableScrollPhysics(),
                padding: const EdgeInsets.all(16),
                child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Info header
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.blue[50],
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.blue[200]!),
                      ),
                      child: Row(
                        children: [
                          Icon(
                            Icons.info_outline,
                            color: Colors.blue[700],
                          ),
                          const SizedBox(width: 12),
                          const Expanded(
                            child: Text(
                              'Th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn t·∫•t c·∫£ kh√°ch h√†ng trong tour',
                              style: TextStyle(fontWeight: FontWeight.w500),
                            ),
                          ),
                        ],
                      ),
                    ),

                    const SizedBox(height: 24),

                    // Message templates
                    _buildMessageTemplates(),

                    const SizedBox(height: 16),

                    // Message field
                    TextFormField(
                      controller: _messageController,
                      maxLines: 5,
                      decoration: const InputDecoration(
                        labelText: 'N·ªôi dung th√¥ng b√°o *',
                        hintText: 'Nh·∫≠p n·ªôi dung th√¥ng b√°o cho kh√°ch h√†ng...',
                        border: OutlineInputBorder(),
                        alignLabelWithHint: true,
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o';
                        }
                        return null;
                      },
                    ),

                    const SizedBox(height: 16),

                    // Urgent checkbox
                    CheckboxListTile(
                      value: _isUrgent,
                      onChanged: (value) {
                        setState(() {
                          _isUrgent = value ?? false;
                        });
                      },
                      title: const Text('Th√¥ng b√°o kh·∫©n c·∫•p'),
                      subtitle: const Text('G·ª≠i ngay l·∫≠p t·ª©c v√† hi·ªÉn th·ªã n·ªïi b·∫≠t'),
                    ),

                    const SizedBox(height: 32),

                    // Submit button
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: _isSending ? null : _sendNotification,
                        icon: _isSending
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                                ),
                              )
                            : const Icon(Icons.send),
                        label: Text(_isSending ? 'ƒêang g·ª≠i...' : 'G·ª≠i th√¥ng b√°o'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orange,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 16),
                        ),
                      ),
                    ),
                  ],
                ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
